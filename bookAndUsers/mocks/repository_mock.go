// Code generated by MockGen. DO NOT EDIT.
// Source: /Users/lahnasti/Desktop/GO_praktikum/bookAndUsers/internal/server/server.go

// Package server is a generated GoMock package.
package mock_server

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	models "github.com/lahnasti/GO_praktikum/internal/models"
)

// MockRepository is a mock of Repository interface.
type MockRepository struct {
	ctrl     *gomock.Controller
	recorder *MockRepositoryMockRecorder
}

// MockRepositoryMockRecorder is the mock recorder for MockRepository.
type MockRepositoryMockRecorder struct {
	mock *MockRepository
}

// NewMockRepository creates a new mock instance.
func NewMockRepository(ctrl *gomock.Controller) *MockRepository {
	mock := &MockRepository{ctrl: ctrl}
	mock.recorder = &MockRepositoryMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockRepository) EXPECT() *MockRepositoryMockRecorder {
	return m.recorder
}

// AddUser mocks base method.
func (m *MockRepository) AddUser(arg0 models.User) (int, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AddUser", arg0)
	ret0, _ := ret[0].(int)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AddUser indicates an expected call of AddUser.
func (mr *MockRepositoryMockRecorder) AddUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddUser", reflect.TypeOf((*MockRepository)(nil).AddUser), arg0)
}

// DeleteBooks mocks base method.
func (m *MockRepository) DeleteBooks() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteBooks")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteBooks indicates an expected call of DeleteBooks.
func (mr *MockRepositoryMockRecorder) DeleteBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteBooks", reflect.TypeOf((*MockRepository)(nil).DeleteBooks))
}

// DeleteUser mocks base method.
func (m *MockRepository) DeleteUser() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteUser")
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteUser indicates an expected call of DeleteUser.
func (mr *MockRepositoryMockRecorder) DeleteUser() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteUser", reflect.TypeOf((*MockRepository)(nil).DeleteUser))
}

// GetAllBooks mocks base method.
func (m *MockRepository) GetAllBooks() ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllBooks")
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllBooks indicates an expected call of GetAllBooks.
func (mr *MockRepositoryMockRecorder) GetAllBooks() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllBooks", reflect.TypeOf((*MockRepository)(nil).GetAllBooks))
}

// GetAllUsers mocks base method.
func (m *MockRepository) GetAllUsers() ([]models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllUsers")
	ret0, _ := ret[0].([]models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllUsers indicates an expected call of GetAllUsers.
func (mr *MockRepositoryMockRecorder) GetAllUsers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllUsers", reflect.TypeOf((*MockRepository)(nil).GetAllUsers))
}

// GetBooksByUser mocks base method.
func (m *MockRepository) GetBooksByUser(arg0 int) ([]models.Book, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetBooksByUser", arg0)
	ret0, _ := ret[0].([]models.Book)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetBooksByUser indicates an expected call of GetBooksByUser.
func (mr *MockRepositoryMockRecorder) GetBooksByUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetBooksByUser", reflect.TypeOf((*MockRepository)(nil).GetBooksByUser), arg0)
}

// GetUser mocks base method.
func (m *MockRepository) GetUser(arg0 int) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser.
func (mr *MockRepositoryMockRecorder) GetUser(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockRepository)(nil).GetUser), arg0)
}

// GetUserByLogin mocks base method.
func (m *MockRepository) GetUserByLogin(arg0 string) (models.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserByLogin", arg0)
	ret0, _ := ret[0].(models.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserByLogin indicates an expected call of GetUserByLogin.
func (mr *MockRepositoryMockRecorder) GetUserByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserByLogin", reflect.TypeOf((*MockRepository)(nil).GetUserByLogin), arg0)
}

// SaveBook mocks base method.
func (m *MockRepository) SaveBook(arg0 models.Book) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBook", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBook indicates an expected call of SaveBook.
func (mr *MockRepositoryMockRecorder) SaveBook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBook", reflect.TypeOf((*MockRepository)(nil).SaveBook), arg0)
}

// SaveBooks mocks base method.
func (m *MockRepository) SaveBooks(arg0 []models.Book, arg1 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SaveBooks", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// SaveBooks indicates an expected call of SaveBooks.
func (mr *MockRepositoryMockRecorder) SaveBooks(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SaveBooks", reflect.TypeOf((*MockRepository)(nil).SaveBooks), arg0, arg1)
}

// SetDeleteStatus mocks base method.
func (m *MockRepository) SetDeleteStatus(arg0 int) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SetDeleteStatus", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// SetDeleteStatus indicates an expected call of SetDeleteStatus.
func (mr *MockRepositoryMockRecorder) SetDeleteStatus(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SetDeleteStatus", reflect.TypeOf((*MockRepository)(nil).SetDeleteStatus), arg0)
}

// UpdateUser mocks base method.
func (m *MockRepository) UpdateUser(arg0 int, arg1 models.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateUser indicates an expected call of UpdateUser.
func (mr *MockRepositoryMockRecorder) UpdateUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateUser", reflect.TypeOf((*MockRepository)(nil).UpdateUser), arg0, arg1)
}
